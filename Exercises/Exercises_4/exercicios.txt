1) Uma vez que as tarefas não terão todas a mesma carga, o paralelismo torna-se ineficiente, fazendo com que o uso de mais do que uma thread torne o algoritmo mais longo.

2) Utilizando esta técnica, fazemos com que o algoritmo se torne mais eficiente, pois iremos executar tarefas mais "pesadas" em paralelo, e permitindo que tarefas mais "leves", que não têm tanta necessidade de ser paralelizadas, sejam executadas sequencialmente.
Relativamente ao número de threads, podemos afirmar que a execução do algoritmo recorrendo a 2 threads é mais eficiente do que o uso de uma thread. No entanto, utilizando 4 threads já obtemos pouca a nenhuma otimização relativamente ao uso de 2 threads.
De realçar que, neste caso, o uso de 2 threads não "corta o tempo a metade" quando comparado com o uso de apenas uma thread, devido à diferente carga das tarefas (para N=45, teremos duas tarefas em paralelo, N=44 e N=43, sendo que a primeira é mais pesada do que segunda - a primeira demorará cerca de 2/3 do tempo sequencial enquanto que a segunda demorará cerca de 1/3).

3)
			                  Cut-Off
		___|   45    |   44    |   43    |   42    |   41    |
	   |___|---------|---------|---------|---------|---------|
	   | 1 |10.275993|12.650682|10.888411|10.412435|10.039992|
Threads| 2 | 6.958536| 7.561923| 6.266369| 6.261084| 6.233255|
	   | 4 | 6.247111| 5.996117| 6.268478| 6.143264| 5.607979|
	   | 8 | 6.479418| 5.825018| 5.404724| 5.256512| 5.306090|